use crate::PieceType;

/// Static information about each shape
pub struct PieceInfo;

impl PieceInfo {
    /// The initial coordinates for each piece
    pub const fn spawn_location(piece_type: PieceType) -> (i8, i8) {
        match piece_type {
            PieceType::O => (3, 20),
            PieceType::I => (3, 19),
            PieceType::T => (3, 20),
            PieceType::L => (3, 20),
            PieceType::J => (3, 20),
            PieceType::S => (3, 20),
            PieceType::Z => (3, 20),
        }
    }

    /// The shape of each piece, as a 2d array of bools
    pub const fn shape(piece_type: PieceType, rotation: i8) -> [[bool; 4]; 4] {
        let arr = match piece_type {
            PieceType::O => [
                [
                    [false, false, false, false],
                    [false, true, true, false],
                    [false, true, true, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [false, true, true, false],
                    [false, true, true, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [false, true, true, false],
                    [false, true, true, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [false, true, true, false],
                    [false, true, true, false],
                    [false, false, false, false],
                ],
            ],
            PieceType::I => [
                [
                    [false, false, true, false],
                    [false, false, true, false],
                    [false, false, true, false],
                    [false, false, true, false],
                ],
                [
                    [false, false, false, false],
                    [false, false, false, false],
                    [true, true, true, true],
                    [false, false, false, false],
                ],
                [
                    [false, true, false, false],
                    [false, true, false, false],
                    [false, true, false, false],
                    [false, true, false, false],
                ],
                [
                    [false, false, false, false],
                    [true, true, true, true],
                    [false, false, false, false],
                    [false, false, false, false],
                ],
            ],
            PieceType::T => [
                [
                    [false, true, false, false],
                    [false, true, true, false],
                    [false, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [true, true, true, false],
                    [false, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [false, true, false, false],
                    [true, true, false, false],
                    [false, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [false, true, false, false],
                    [true, true, true, false],
                    [false, false, false, false],
                    [false, false, false, false],
                ],
            ],
            PieceType::L => [
                [
                    [false, true, false, false],
                    [false, true, false, false],
                    [false, true, true, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [true, true, true, false],
                    [true, false, false, false],
                    [false, false, false, false],
                ],
                [
                    [true, true, false, false],
                    [false, true, false, false],
                    [false, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, true, false],
                    [true, true, true, false],
                    [false, false, false, false],
                    [false, false, false, false],
                ],
            ],
            PieceType::J => [
                [
                    [false, true, true, false],
                    [false, true, false, false],
                    [false, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [true, true, true, false],
                    [false, false, true, false],
                    [false, false, false, false],
                ],
                [
                    [false, true, false, false],
                    [false, true, false, false],
                    [true, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [true, false, false, false],
                    [true, true, true, false],
                    [false, false, false, false],
                    [false, false, false, false],
                ],
            ],
            PieceType::S => [
                [
                    [false, true, false, false],
                    [false, true, true, false],
                    [false, false, true, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [false, true, true, false],
                    [true, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [true, false, false, false],
                    [true, true, false, false],
                    [false, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [false, true, true, false],
                    [true, true, false, false],
                    [false, false, false, false],
                    [false, false, false, false],
                ],
            ],
            PieceType::Z => [
                [
                    [false, false, true, false],
                    [false, true, true, false],
                    [false, true, false, false],
                    [false, false, false, false],
                ],
                [
                    [false, false, false, false],
                    [true, true, false, false],
                    [false, true, true, false],
                    [false, false, false, false],
                ],
                [
                    [false, true, false, false],
                    [true, true, false, false],
                    [true, false, false, false],
                    [false, false, false, false],
                ],
                [
                    [true, true, false, false],
                    [false, true, true, false],
                    [false, false, false, false],
                    [false, false, false, false],
                ],
            ],
        };
        arr[rotation as usize]
    }

    /// u16 bitmask of each shape, if shifting out of bounds, the shape will be cut-off
    pub const fn bit_shape(piece_type: PieceType, rotation: i8, x: i8) -> [u16; 4] {
        let arr = match piece_type {
            PieceType::O => [
                [
                    [0, 1, 1, 0],
                    [0, 3, 3, 0],
                    [0, 6, 6, 0],
                    [0, 12, 12, 0],
                    [0, 24, 24, 0],
                    [0, 48, 48, 0],
                    [0, 96, 96, 0],
                    [0, 192, 192, 0],
                    [0, 384, 384, 0],
                    [0, 768, 768, 0],
                    [0, 512, 512, 0],
                ],
                [
                    [0, 1, 1, 0],
                    [0, 3, 3, 0],
                    [0, 6, 6, 0],
                    [0, 12, 12, 0],
                    [0, 24, 24, 0],
                    [0, 48, 48, 0],
                    [0, 96, 96, 0],
                    [0, 192, 192, 0],
                    [0, 384, 384, 0],
                    [0, 768, 768, 0],
                    [0, 512, 512, 0],
                ],
                [
                    [0, 1, 1, 0],
                    [0, 3, 3, 0],
                    [0, 6, 6, 0],
                    [0, 12, 12, 0],
                    [0, 24, 24, 0],
                    [0, 48, 48, 0],
                    [0, 96, 96, 0],
                    [0, 192, 192, 0],
                    [0, 384, 384, 0],
                    [0, 768, 768, 0],
                    [0, 512, 512, 0],
                ],
                [
                    [0, 1, 1, 0],
                    [0, 3, 3, 0],
                    [0, 6, 6, 0],
                    [0, 12, 12, 0],
                    [0, 24, 24, 0],
                    [0, 48, 48, 0],
                    [0, 96, 96, 0],
                    [0, 192, 192, 0],
                    [0, 384, 384, 0],
                    [0, 768, 768, 0],
                    [0, 512, 512, 0],
                ],
            ],
            PieceType::I => [
                [
                    [0, 0, 3, 0],
                    [0, 0, 7, 0],
                    [0, 0, 15, 0],
                    [0, 0, 30, 0],
                    [0, 0, 60, 0],
                    [0, 0, 120, 0],
                    [0, 0, 240, 0],
                    [0, 0, 480, 0],
                    [0, 0, 960, 0],
                    [0, 0, 896, 0],
                    [0, 0, 768, 0],
                ],
                [
                    [1, 1, 1, 1],
                    [2, 2, 2, 2],
                    [4, 4, 4, 4],
                    [8, 8, 8, 8],
                    [16, 16, 16, 16],
                    [32, 32, 32, 32],
                    [64, 64, 64, 64],
                    [128, 128, 128, 128],
                    [256, 256, 256, 256],
                    [512, 512, 512, 512],
                    [0, 0, 0, 0],
                ],
                [
                    [0, 3, 0, 0],
                    [0, 7, 0, 0],
                    [0, 15, 0, 0],
                    [0, 30, 0, 0],
                    [0, 60, 0, 0],
                    [0, 120, 0, 0],
                    [0, 240, 0, 0],
                    [0, 480, 0, 0],
                    [0, 960, 0, 0],
                    [0, 896, 0, 0],
                    [0, 768, 0, 0],
                ],
                [
                    [0, 0, 0, 0],
                    [1, 1, 1, 1],
                    [2, 2, 2, 2],
                    [4, 4, 4, 4],
                    [8, 8, 8, 8],
                    [16, 16, 16, 16],
                    [32, 32, 32, 32],
                    [64, 64, 64, 64],
                    [128, 128, 128, 128],
                    [256, 256, 256, 256],
                    [512, 512, 512, 512],
                ],
            ],
            PieceType::T => [
                [
                    [0, 1, 0, 0],
                    [0, 3, 1, 0],
                    [0, 7, 2, 0],
                    [0, 14, 4, 0],
                    [0, 28, 8, 0],
                    [0, 56, 16, 0],
                    [0, 112, 32, 0],
                    [0, 224, 64, 0],
                    [0, 448, 128, 0],
                    [0, 896, 256, 0],
                    [0, 768, 512, 0],
                ],
                [
                    [0, 1, 0, 0],
                    [1, 3, 1, 0],
                    [2, 6, 2, 0],
                    [4, 12, 4, 0],
                    [8, 24, 8, 0],
                    [16, 48, 16, 0],
                    [32, 96, 32, 0],
                    [64, 192, 64, 0],
                    [128, 384, 128, 0],
                    [256, 768, 256, 0],
                    [512, 512, 512, 0],
                ],
                [
                    [0, 1, 0, 0],
                    [1, 3, 0, 0],
                    [2, 7, 0, 0],
                    [4, 14, 0, 0],
                    [8, 28, 0, 0],
                    [16, 56, 0, 0],
                    [32, 112, 0, 0],
                    [64, 224, 0, 0],
                    [128, 448, 0, 0],
                    [256, 896, 0, 0],
                    [512, 768, 0, 0],
                ],
                [
                    [0, 0, 0, 0],
                    [1, 1, 1, 0],
                    [2, 3, 2, 0],
                    [4, 6, 4, 0],
                    [8, 12, 8, 0],
                    [16, 24, 16, 0],
                    [32, 48, 32, 0],
                    [64, 96, 64, 0],
                    [128, 192, 128, 0],
                    [256, 384, 256, 0],
                    [512, 768, 512, 0],
                ],
            ],
            PieceType::L => [
                [
                    [0, 1, 1, 0],
                    [0, 3, 2, 0],
                    [0, 7, 4, 0],
                    [0, 14, 8, 0],
                    [0, 28, 16, 0],
                    [0, 56, 32, 0],
                    [0, 112, 64, 0],
                    [0, 224, 128, 0],
                    [0, 448, 256, 0],
                    [0, 896, 512, 0],
                    [0, 768, 0, 0],
                ],
                [
                    [1, 0, 0, 0],
                    [3, 1, 1, 0],
                    [6, 2, 2, 0],
                    [12, 4, 4, 0],
                    [24, 8, 8, 0],
                    [48, 16, 16, 0],
                    [96, 32, 32, 0],
                    [192, 64, 64, 0],
                    [384, 128, 128, 0],
                    [768, 256, 256, 0],
                    [512, 512, 512, 0],
                ],
                [
                    [0, 1, 0, 0],
                    [0, 3, 0, 0],
                    [1, 7, 0, 0],
                    [2, 14, 0, 0],
                    [4, 28, 0, 0],
                    [8, 56, 0, 0],
                    [16, 112, 0, 0],
                    [32, 224, 0, 0],
                    [64, 448, 0, 0],
                    [128, 896, 0, 0],
                    [256, 768, 0, 0],
                ],
                [
                    [0, 0, 0, 0],
                    [1, 1, 1, 0],
                    [2, 2, 3, 0],
                    [4, 4, 6, 0],
                    [8, 8, 12, 0],
                    [16, 16, 24, 0],
                    [32, 32, 48, 0],
                    [64, 64, 96, 0],
                    [128, 128, 192, 0],
                    [256, 256, 384, 0],
                    [512, 512, 768, 0],
                ],
            ],
            PieceType::J => [
                [
                    [0, 1, 0, 0],
                    [0, 3, 0, 0],
                    [0, 7, 1, 0],
                    [0, 14, 2, 0],
                    [0, 28, 4, 0],
                    [0, 56, 8, 0],
                    [0, 112, 16, 0],
                    [0, 224, 32, 0],
                    [0, 448, 64, 0],
                    [0, 896, 128, 0],
                    [0, 768, 256, 0],
                ],
                [
                    [0, 0, 1, 0],
                    [1, 1, 3, 0],
                    [2, 2, 6, 0],
                    [4, 4, 12, 0],
                    [8, 8, 24, 0],
                    [16, 16, 48, 0],
                    [32, 32, 96, 0],
                    [64, 64, 192, 0],
                    [128, 128, 384, 0],
                    [256, 256, 768, 0],
                    [512, 512, 512, 0],
                ],
                [
                    [1, 1, 0, 0],
                    [2, 3, 0, 0],
                    [4, 7, 0, 0],
                    [8, 14, 0, 0],
                    [16, 28, 0, 0],
                    [32, 56, 0, 0],
                    [64, 112, 0, 0],
                    [128, 224, 0, 0],
                    [256, 448, 0, 0],
                    [512, 896, 0, 0],
                    [0, 768, 0, 0],
                ],
                [
                    [0, 0, 0, 0],
                    [1, 1, 1, 0],
                    [3, 2, 2, 0],
                    [6, 4, 4, 0],
                    [12, 8, 8, 0],
                    [24, 16, 16, 0],
                    [48, 32, 32, 0],
                    [96, 64, 64, 0],
                    [192, 128, 128, 0],
                    [384, 256, 256, 0],
                    [768, 512, 512, 0],
                ],
            ],
            PieceType::S => [
                [
                    [0, 0, 1, 0],
                    [0, 1, 3, 0],
                    [0, 3, 6, 0],
                    [0, 6, 12, 0],
                    [0, 12, 24, 0],
                    [0, 24, 48, 0],
                    [0, 48, 96, 0],
                    [0, 96, 192, 0],
                    [0, 192, 384, 0],
                    [0, 384, 768, 0],
                    [0, 768, 512, 0],
                ],
                [
                    [1, 1, 0, 0],
                    [2, 3, 1, 0],
                    [4, 6, 2, 0],
                    [8, 12, 4, 0],
                    [16, 24, 8, 0],
                    [32, 48, 16, 0],
                    [64, 96, 32, 0],
                    [128, 192, 64, 0],
                    [256, 384, 128, 0],
                    [512, 768, 256, 0],
                    [0, 512, 512, 0],
                ],
                [
                    [0, 1, 0, 0],
                    [1, 3, 0, 0],
                    [3, 6, 0, 0],
                    [6, 12, 0, 0],
                    [12, 24, 0, 0],
                    [24, 48, 0, 0],
                    [48, 96, 0, 0],
                    [96, 192, 0, 0],
                    [192, 384, 0, 0],
                    [384, 768, 0, 0],
                    [768, 512, 0, 0],
                ],
                [
                    [0, 0, 0, 0],
                    [1, 1, 0, 0],
                    [2, 3, 1, 0],
                    [4, 6, 2, 0],
                    [8, 12, 4, 0],
                    [16, 24, 8, 0],
                    [32, 48, 16, 0],
                    [64, 96, 32, 0],
                    [128, 192, 64, 0],
                    [256, 384, 128, 0],
                    [512, 768, 256, 0],
                ],
            ],
            PieceType::Z => [
                [
                    [0, 1, 0, 0],
                    [0, 3, 1, 0],
                    [0, 6, 3, 0],
                    [0, 12, 6, 0],
                    [0, 24, 12, 0],
                    [0, 48, 24, 0],
                    [0, 96, 48, 0],
                    [0, 192, 96, 0],
                    [0, 384, 192, 0],
                    [0, 768, 384, 0],
                    [0, 512, 768, 0],
                ],
                [
                    [0, 1, 1, 0],
                    [1, 3, 2, 0],
                    [2, 6, 4, 0],
                    [4, 12, 8, 0],
                    [8, 24, 16, 0],
                    [16, 48, 32, 0],
                    [32, 96, 64, 0],
                    [64, 192, 128, 0],
                    [128, 384, 256, 0],
                    [256, 768, 512, 0],
                    [512, 512, 0, 0],
                ],
                [
                    [1, 0, 0, 0],
                    [3, 1, 0, 0],
                    [6, 3, 0, 0],
                    [12, 6, 0, 0],
                    [24, 12, 0, 0],
                    [48, 24, 0, 0],
                    [96, 48, 0, 0],
                    [192, 96, 0, 0],
                    [384, 192, 0, 0],
                    [768, 384, 0, 0],
                    [512, 768, 0, 0],
                ],
                [
                    [0, 0, 0, 0],
                    [0, 1, 1, 0],
                    [1, 3, 2, 0],
                    [2, 6, 4, 0],
                    [4, 12, 8, 0],
                    [8, 24, 16, 0],
                    [16, 48, 32, 0],
                    [32, 96, 64, 0],
                    [64, 192, 128, 0],
                    [128, 384, 256, 0],
                    [256, 768, 512, 0],
                ],
            ],
        };
        arr[rotation as usize][(x + 2) as usize]
    }

    /// For each column, number of empty squares between bottom and bottom-most block,
    /// then number of squares from bottom to top-most block.
    /// Both fields are -1 if that column is empty
    pub const fn height_map(piece_type: PieceType, rotation: i8) -> [(i8, i8); 4] {
        let arr = match piece_type {
            PieceType::O => [
                [(-1, -1), (1, 2), (1, 2), (-1, -1)],
                [(-1, -1), (1, 2), (1, 2), (-1, -1)],
                [(-1, -1), (1, 2), (1, 2), (-1, -1)],
                [(-1, -1), (1, 2), (1, 2), (-1, -1)],
            ],
            PieceType::I => [
                [(2, 1), (2, 1), (2, 1), (2, 1)],
                [(-1, -1), (-1, -1), (0, 4), (-1, -1)],
                [(1, 1), (1, 1), (1, 1), (1, 1)],
                [(-1, -1), (0, 4), (-1, -1), (-1, -1)],
            ],
            PieceType::T => [
                [(1, 1), (1, 2), (1, 1), (-1, -1)],
                [(-1, -1), (0, 3), (1, 1), (-1, -1)],
                [(1, 1), (0, 2), (1, 1), (-1, -1)],
                [(1, 1), (0, 3), (-1, -1), (-1, -1)],
            ],
            PieceType::L => [
                [(1, 1), (1, 1), (1, 2), (-1, -1)],
                [(-1, -1), (0, 3), (0, 1), (-1, -1)],
                [(0, 2), (1, 1), (1, 1), (-1, -1)],
                [(2, 1), (0, 3), (-1, -1), (-1, -1)],
            ],
            PieceType::J => [
                [(1, 2), (1, 1), (1, 1), (-1, -1)],
                [(-1, -1), (0, 3), (2, 1), (-1, -1)],
                [(1, 1), (1, 1), (0, 2), (-1, -1)],
                [(0, 1), (0, 3), (-1, -1), (-1, -1)],
            ],
            PieceType::S => [
                [(1, 1), (1, 2), (2, 1), (-1, -1)],
                [(-1, -1), (1, 2), (0, 2), (-1, -1)],
                [(0, 1), (0, 2), (1, 1), (-1, -1)],
                [(1, 2), (0, 2), (-1, -1), (-1, -1)],
            ],
            PieceType::Z => [
                [(2, 1), (1, 2), (1, 1), (-1, -1)],
                [(-1, -1), (0, 2), (1, 2), (-1, -1)],
                [(1, 1), (0, 2), (0, 1), (-1, -1)],
                [(0, 2), (1, 2), (-1, -1), (-1, -1)],
            ],
        };
        arr[rotation as usize]
    }

    /// Bounds of location coordinates for each piece
    /// (min x, max x, min y, max y)
    pub const fn location_bound(piece_type: PieceType, rotation: i8) -> (i8, i8, i8, i8) {
        let arr = match piece_type {
            PieceType::O => [
                (-1, 7, -1, 21),
                (-1, 7, -1, 21),
                (-1, 7, -1, 21),
                (-1, 7, -1, 21),
            ],
            PieceType::I => [
                (0, 6, -2, 21),
                (-2, 7, 0, 20),
                (0, 6, -1, 22),
                (-1, 8, 0, 20),
            ],
            PieceType::T => [(0, 7, -1, 21), (-1, 7, 0, 21), (0, 7, 0, 22), (0, 8, 0, 21)],
            PieceType::L => [(0, 7, -1, 21), (-1, 7, 0, 21), (0, 7, 0, 22), (0, 8, 0, 21)],
            PieceType::J => [(0, 7, -1, 21), (-1, 7, 0, 21), (0, 7, 0, 22), (0, 8, 0, 21)],
            PieceType::S => [(0, 7, -1, 21), (-1, 7, 0, 21), (0, 7, 0, 22), (0, 8, 0, 21)],
            PieceType::Z => [(0, 7, -1, 21), (-1, 7, 0, 21), (0, 7, 0, 22), (0, 8, 0, 21)],
        };
        arr[rotation as usize]
    }

    /// Possible (x, y) shifts when doing kicks
    pub const fn kick_table(
        piece_type: PieceType,
        old_rotation: i8,
        new_rotation: i8,
    ) -> &'static [(i8, i8)] {
        let arr: [[&[(i8, i8)]; 4]; 4] = match piece_type {
            PieceType::O => [
                [&[], &[(0, 0)], &[(0, 0)], &[(0, 0)]],
                [&[(0, 0)], &[], &[(0, 0)], &[(0, 0)]],
                [&[(0, 0)], &[(0, 0)], &[], &[(0, 0)]],
                [&[(0, 0)], &[(0, 0)], &[(0, 0)], &[]],
            ],
            PieceType::I => [
                [
                    &[],
                    &[(0, 0), (-2, 0), (1, 0), (-2, -1), (1, 2)],
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (2, 0), (-1, 2), (2, -1)],
                ],
                [
                    &[(0, 0), (2, 0), (-1, 0), (2, 1), (-1, -2)],
                    &[],
                    &[(0, 0), (-1, 0), (2, 0), (-1, 2), (2, -1)],
                    &[(0, 0)],
                ],
                [
                    &[(0, 0)],
                    &[(0, 0), (1, 0), (-2, 0), (1, -2), (-2, 1)],
                    &[],
                    &[(0, 0), (2, 0), (-1, 0), (2, 1), (-1, -2)],
                ],
                [
                    &[(0, 0), (1, 0), (-2, 0), (1, -2), (-2, 1)],
                    &[(0, 0)],
                    &[(0, 0), (-2, 0), (1, 0), (-2, -1), (1, 2)],
                    &[],
                ],
            ],
            PieceType::T => [
                [
                    &[],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[(0, 0)],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[],
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[(0, 0)],
                ],
                [
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[],
                ],
            ],
            PieceType::L => [
                [
                    &[],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[(0, 0)],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[],
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[(0, 0)],
                ],
                [
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[],
                ],
            ],
            PieceType::J => [
                [
                    &[],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[(0, 0)],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[],
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[(0, 0)],
                ],
                [
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[],
                ],
            ],
            PieceType::S => [
                [
                    &[],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[(0, 0)],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[],
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[(0, 0)],
                ],
                [
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[],
                ],
            ],
            PieceType::Z => [
                [
                    &[],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[(0, 0)],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[],
                    &[(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],
                    &[(0, 0)],
                ],
                [
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],
                    &[],
                    &[(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],
                ],
                [
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[(0, 0)],
                    &[(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],
                    &[],
                ],
            ],
        };
        arr[old_rotation as usize][new_rotation as usize]
    }
}
