use libtetris::*;

fn main() {
    // Assumption: Queue starts with [O] I T L ...
    let actions = vec![
        Action::Hold,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::HardDrop,
        Action::Hold,
        Action::RotateCw,
        Action::ShiftRight,
        Action::HardDrop,
        Action::HardDrop,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::HardDrop,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::Hold,
        Action::HardDrop,
        Action::Hold,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::Hold,
        Action::RotateCw,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::RotateCcw,
        Action::ShiftLeft,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::HardDrop,
        Action::RotateCw,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::Hold,
        Action::RotateCw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::SoftDrop,
        Action::RotateCcw,
        Action::RotateCcw,
        Action::SoftDrop,
        Action::RotateCcw,
        Action::HardDrop,
        Action::RotateCw,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::SoftDrop,
        Action::RotateCcw,
        Action::RotateCcw,
        Action::HardDrop,
        Action::Hold,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::HardDrop,
        Action::Hold,
        Action::RotateCcw,
        Action::HardDrop,
        Action::Hold,
        Action::RotateCw,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::Hold,
        Action::RotateCw,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::SoftDrop,
        Action::RotateCw,
        Action::HardDrop,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::Hold,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::SoftDrop,
        Action::ShiftRight,
        Action::HardDrop,
        Action::RotateCcw,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::HardDrop,
        Action::HardDrop,
        Action::Hold,
        Action::RotateCcw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::SoftDrop,
        Action::RotateCcw,
        Action::HardDrop,
        Action::RotateCcw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::HardDrop,
        Action::RotateCcw,
        Action::ShiftRight,
        Action::SoftDrop,
        Action::HardDrop,
        Action::Hold,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::ShiftRight,
        Action::HardDrop,
        Action::ShiftLeft,
        Action::SoftDrop,
        Action::HardDrop,
        Action::RotateCw,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::SoftDrop,
        Action::RotateCcw,
        Action::HardDrop,
        Action::Hold,
        Action::Rotate180,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::ShiftLeft,
        Action::HardDrop,
    ];
    let mut bag = Bag::new_fixed(&PieceType::ALL);
    let mut game = Game::from_bag(&mut bag);
    game.swap_hold();
    for _ in 0..10_000 {
        for &action in actions.iter() {
            game.apply(action);
            game.refill_queue(&mut bag);
            println!("{game}");
            std::thread::sleep(std::time::Duration::from_millis(50));
        }
    }
}
